{"ast":null,"code":"var _jsxFileName = \"/home/iryna/Desktop/nodejs-aws-fe/src/components/pages/PageOrder/PageOrder.tsx\";\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { useParams } from 'react-router-dom';\nimport PaperLayout from \"components/PaperLayout/PaperLayout\";\nimport Typography from \"@material-ui/core/Typography\";\nimport API_PATHS from \"constants/apiPaths\";\nimport ReviewOrder from \"components/pages/PageCart/components/ReviewOrder\";\nimport { ORDER_STATUS, ORDER_STATUS_FLOW } from \"constants/order\";\nimport Button from \"@material-ui/core/Button\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport { Field, Formik } from \"formik\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { TextField } from \"formik-material-ui\";\nimport Table from \"@material-ui/core/Table\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\n\nconst Form = props => {\n  const {\n    values,\n    // touched,\n    // errors,\n    dirty,\n    isSubmitting,\n    isValid,\n    // handleChange,\n    // handleBlur,\n    handleSubmit // handleReset,\n    // setFieldValue,\n    // isEditMode,\n    // onCancel,\n    // isButtonContact,\n    // setTouched,\n    // isButtonAddAndRedirect,\n    // setShouldRedirect,\n    // submitForm,\n    // onGetCitizen,\n    // shouldConfirmLeave,\n\n  } = props;\n  let helperText = '';\n\n  if (values.status === ORDER_STATUS.approved) {\n    helperText = 'Setting status to APPROVED will decrease products count from stock!!!';\n  } // TODO add check if status was changed from approved to cancelled\n  //  to increase product count back again\n  // if ((values.status) === ORDER_STATUS.cancelled) {\n  //   helperText = 'Setting status to CANCELLED will increase products count in stock!!!';\n  // }\n\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Field, {\n    component: TextField,\n    name: \"status\",\n    label: \"Status\",\n    select: true,\n    fullWidth: true,\n    helperText: helperText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 11\n    }\n  }, ORDER_STATUS_FLOW.map((status, index) => /*#__PURE__*/React.createElement(MenuItem, {\n    key: index,\n    value: status,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 15\n    }\n  }, status)))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Field, {\n    component: TextField,\n    name: \"comment\",\n    label: \"Comment\",\n    fullWidth: true,\n    autoComplete: \"off\",\n    multiline: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    container: true,\n    xs: 12,\n    justify: \"space-between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    variant: \"contained\",\n    color: \"primary\",\n    disabled: !dirty || isSubmitting || !isValid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 11\n    }\n  }, \"Change status\"))));\n};\n\nexport default function PageOrder() {\n  const {\n    id\n  } = useParams();\n  const [order, setOrder] = useState({});\n  const [cartItems, setCartItems] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const onChangeStatus = values => {\n    return axios.put(`${API_PATHS.order}/order/${order.id}/status`, values).then(({\n      data\n    }) => setOrder(data));\n  };\n\n  useEffect(() => {\n    if (!id) {\n      setIsLoading(false);\n      return;\n    }\n\n    const promises = [axios.get(`${API_PATHS.product}/product`), axios.get(`${API_PATHS.order}/order/${id}`)];\n    Promise.all(promises).then(([{\n      data: products\n    }, {\n      data: order\n    }]) => {\n      const cartItems = order.items.map(i => ({\n        product: products.find(p => p.id === i.productId),\n        count: i.count\n      }));\n      setOrder(order);\n      setCartItems(cartItems);\n      setIsLoading(false);\n    });\n  }, [id]);\n  if (isLoading) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 25\n    }\n  }, \"loading...\");\n  const statusHistory = order.statusHistory || [];\n  const lastStatusItem = statusHistory[statusHistory.length - 1];\n  return /*#__PURE__*/React.createElement(PaperLayout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    component: \"h1\",\n    variant: \"h4\",\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }\n  }, \"Manage order\"), /*#__PURE__*/React.createElement(ReviewOrder, {\n    address: order.address,\n    items: cartItems,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }\n  }, \"Status:\"), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h6\",\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }\n  }, lastStatusItem === null || lastStatusItem === void 0 ? void 0 : lastStatusItem.status.toUpperCase()), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }\n  }, \"Change status:\"), /*#__PURE__*/React.createElement(Formik, {\n    initialValues: {\n      status: lastStatusItem.status,\n      comment: ''\n    },\n    enableReinitialize: true,\n    onSubmit: onChangeStatus,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }\n  }, props => /*#__PURE__*/React.createElement(Form, Object.assign({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 48\n    }\n  }))), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }\n  }, \"Status history:\"), /*#__PURE__*/React.createElement(TableContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    \"aria-label\": \"simple table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TableHead, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TableRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 15\n    }\n  }, \"Status\"), /*#__PURE__*/React.createElement(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 15\n    }\n  }, \"Date and Time\"), /*#__PURE__*/React.createElement(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 15\n    }\n  }, \"Comment\"))), /*#__PURE__*/React.createElement(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 11\n    }\n  }, statusHistory.map(statusHistoryItem => /*#__PURE__*/React.createElement(TableRow, {\n    key: order.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(TableCell, {\n    component: \"th\",\n    scope: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 17\n    }\n  }, statusHistoryItem.status.toUpperCase()), /*#__PURE__*/React.createElement(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 17\n    }\n  }, new Date(statusHistoryItem.timestamp).toString()), /*#__PURE__*/React.createElement(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 17\n    }\n  }, statusHistoryItem.comment)))))));\n}","map":{"version":3,"sources":["/home/iryna/Desktop/nodejs-aws-fe/src/components/pages/PageOrder/PageOrder.tsx"],"names":["React","useEffect","useState","axios","useParams","PaperLayout","Typography","API_PATHS","ReviewOrder","ORDER_STATUS","ORDER_STATUS_FLOW","Button","MenuItem","Field","Formik","Grid","TextField","Table","TableHead","TableRow","TableCell","TableBody","TableContainer","Form","props","values","dirty","isSubmitting","isValid","handleSubmit","helperText","status","approved","map","index","PageOrder","id","order","setOrder","cartItems","setCartItems","isLoading","setIsLoading","onChangeStatus","put","then","data","promises","get","product","Promise","all","products","items","i","find","p","productId","count","statusHistory","lastStatusItem","length","address","toUpperCase","comment","statusHistoryItem","Date","timestamp","toString"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {OrderItem} from \"models/Order\";\nimport axios from 'axios';\nimport {useParams} from 'react-router-dom';\nimport PaperLayout from \"components/PaperLayout/PaperLayout\";\nimport Typography from \"@material-ui/core/Typography\";\nimport API_PATHS from \"constants/apiPaths\";\nimport {CartItem} from \"models/CartItem\";\nimport {Product} from \"models/Product\";\nimport ReviewOrder from \"components/pages/PageCart/components/ReviewOrder\";\nimport {ORDER_STATUS, ORDER_STATUS_FLOW} from \"constants/order\";\nimport Button from \"@material-ui/core/Button\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport {Field, Formik, FormikProps, FormikValues} from \"formik\";\nimport Grid from \"@material-ui/core/Grid\";\nimport {TextField} from \"formik-material-ui\";\nimport Table from \"@material-ui/core/Table\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\n\nconst Form = (props: FormikProps<FormikValues>) => {\n  const {\n    values,\n    // touched,\n    // errors,\n    dirty,\n    isSubmitting,\n    isValid,\n    // handleChange,\n    // handleBlur,\n    handleSubmit,\n    // handleReset,\n    // setFieldValue,\n    // isEditMode,\n    // onCancel,\n    // isButtonContact,\n    // setTouched,\n    // isButtonAddAndRedirect,\n    // setShouldRedirect,\n    // submitForm,\n    // onGetCitizen,\n    // shouldConfirmLeave,\n  } = props;\n  let helperText = '';\n  if ((values.status) === ORDER_STATUS.approved) {\n    helperText = 'Setting status to APPROVED will decrease products count from stock!!!';\n  }\n  // TODO add check if status was changed from approved to cancelled\n  //  to increase product count back again\n  // if ((values.status) === ORDER_STATUS.cancelled) {\n  //   helperText = 'Setting status to CANCELLED will increase products count in stock!!!';\n  // }\n\n  return (\n    <form onSubmit={handleSubmit} autoComplete=\"off\">\n      <Grid container spacing={2}>\n        <Grid item xs={12}>\n          <Field\n            component={TextField}\n            name=\"status\"\n            label=\"Status\"\n            select\n            fullWidth\n            helperText={helperText}\n          >\n            {ORDER_STATUS_FLOW.map((status,index) => (\n              <MenuItem key={index} value={status}>\n                {status}\n              </MenuItem>\n            ))}\n          </Field>\n        </Grid>\n        <Grid item xs={12}>\n          <Field\n            component={TextField}\n            name=\"comment\"\n            label=\"Comment\"\n            fullWidth\n            autoComplete=\"off\"\n            multiline\n          />\n        </Grid>\n        <Grid item container xs={12} justify=\"space-between\">\n          <Button\n            type=\"submit\"\n            variant=\"contained\"\n            color=\"primary\"\n            disabled={!dirty || isSubmitting || !isValid}\n          >\n            Change status\n          </Button>\n        </Grid>\n      </Grid>\n    </form>\n  );\n}\n\nexport default function PageOrder() {\n  const {id} = useParams();\n  const [order, setOrder] = useState<any>({});\n  const [cartItems, setCartItems] = useState<CartItem[]>([]);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n\n  const onChangeStatus = (values: FormikValues) => {\n    return axios.put(`${API_PATHS.order}/order/${order.id}/status`, values)\n      .then(({data}) => setOrder(data));\n  };\n\n  useEffect(() => {\n    if (!id) {\n      setIsLoading(false);\n      return;\n    }\n    const promises: any[] = [\n      axios.get(`${API_PATHS.product}/product`),\n      axios.get(`${API_PATHS.order}/order/${id}`)\n    ];\n    Promise.all(promises)\n      .then(([{data: products}, {data: order}]) => {\n        const cartItems: CartItem[] = order.items.map((i: OrderItem) => ({\n          product: products.find((p: Product) => p.id === i.productId),\n          count: i.count\n        }));\n        setOrder(order);\n        setCartItems(cartItems);\n        setIsLoading(false);\n      });\n  }, [id])\n\n  if (isLoading) return <p>loading...</p>;\n\n  const statusHistory = order.statusHistory || [];\n\n  const lastStatusItem = statusHistory[statusHistory.length - 1];\n\n  return (\n    <PaperLayout>\n      <Typography component=\"h1\" variant=\"h4\" align=\"center\">\n        Manage order\n      </Typography>\n      <ReviewOrder address={order.address} items={cartItems}/>\n      <Typography variant=\"h6\">\n        Status:\n      </Typography>\n      <Typography variant=\"h6\" color=\"primary\">\n        {lastStatusItem?.status.toUpperCase()}\n      </Typography>\n      <Typography variant=\"h6\">\n        Change status:\n      </Typography>\n      <Formik\n        initialValues={{status: lastStatusItem.status, comment: ''}}\n        enableReinitialize\n        onSubmit={onChangeStatus}\n      >\n        {(props: FormikProps<FormikValues>) => <Form {...props} />}\n      </Formik>\n      <Typography variant=\"h6\">\n        Status history:\n      </Typography>\n      <TableContainer>\n        <Table aria-label=\"simple table\">\n          <TableHead>\n            <TableRow>\n              <TableCell>Status</TableCell>\n              <TableCell align=\"right\">Date and Time</TableCell>\n              <TableCell align=\"right\">Comment</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {statusHistory.map((statusHistoryItem: any) => (\n              <TableRow key={order.id}>\n                <TableCell component=\"th\" scope=\"row\">\n                  {statusHistoryItem.status.toUpperCase()}\n                </TableCell>\n                <TableCell align=\"right\">{(new Date(statusHistoryItem.timestamp)).toString()}</TableCell>\n                <TableCell align=\"right\">{statusHistoryItem.comment}</TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </PaperLayout>\n  );\n}"]},"metadata":{},"sourceType":"module"}