{"ast":null,"code":"var _jsxFileName = \"/home/iryna/Desktop/nodejs-aws-fe/src/components/pages/admin/PageProductImport/components/CSVFileImport.tsx\";\nimport React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from \"@material-ui/core/Typography\";\nimport axios from 'axios';\nconst useStyles = makeStyles(theme => ({\n  content: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(3, 0, 3)\n  }\n}));\nexport default function CSVFileImport({\n  url,\n  title\n}) {\n  const classes = useStyles();\n  const [file, setFile] = useState();\n  const [uploadUrl, setUploadUrl] = useState();\n\n  const createFile = file => {\n    let reader = new FileReader();\n\n    reader.onload = e => {\n      console.log(e.target.result);\n      setFile(e.target.result);\n    };\n\n    reader.readAsDataURL(file);\n  };\n\n  const onFileChange = e => {\n    console.log(e);\n    let files = e.target.files || e.dataTransfer.files;\n    if (!files.length) return;\n    createFile(files[0]);\n  };\n\n  const removeFile = () => {\n    setFile('');\n  };\n\n  const uploadFile = async e => {\n    // Get the presigned URL\n    const response = await axios({\n      method: 'GET',\n      url\n    });\n    console.log('Response: ', response.data);\n    console.log('Uploading: ', file);\n    let binary = atob(file.split(',')[1]);\n    let array = [];\n\n    for (var i = 0; i < binary.length; i++) {\n      array.push(binary.charCodeAt(i));\n    }\n\n    let blobData = new Blob([new Uint8Array(array)], {\n      type: 'text/plain'\n    });\n    console.log('Uploading to: ', response.data.uploadURL);\n    const result = await fetch(response.data.uploadURL, {\n      method: 'PUT',\n      body: blobData\n    });\n    console.log('Result: ', result); // Final URL for the user doesn't need the query string params\n\n    setUploadUrl(response.data.uploadURL.split('?')[0]);\n    setFile('');\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.content,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h6\",\n    gutterBottom: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, title), !file ? /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    onChange: onFileChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 11\n    }\n  }) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, !uploadUrl && /*#__PURE__*/React.createElement(\"button\", {\n    onClick: removeFile,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 26\n    }\n  }, \"Remove file\"), !uploadUrl && /*#__PURE__*/React.createElement(\"button\", {\n    onClick: uploadFile,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 26\n    }\n  }, \"Upload file\")));\n}","map":{"version":3,"sources":["/home/iryna/Desktop/nodejs-aws-fe/src/components/pages/admin/PageProductImport/components/CSVFileImport.tsx"],"names":["React","useState","makeStyles","Typography","axios","useStyles","theme","content","backgroundColor","palette","background","paper","padding","spacing","CSVFileImport","url","title","classes","file","setFile","uploadUrl","setUploadUrl","createFile","reader","FileReader","onload","e","console","log","target","result","readAsDataURL","onFileChange","files","dataTransfer","length","removeFile","uploadFile","response","method","data","binary","atob","split","array","i","push","charCodeAt","blobData","Blob","Uint8Array","type","uploadURL","fetch","body"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\nimport Typography from \"@material-ui/core/Typography\";\nimport axios from 'axios';\n\nconst useStyles = makeStyles((theme) => ({\n  content: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(3, 0, 3),\n  },\n}));\n\ntype CSVFileImportProps = {\n  url: string,\n  title: string\n};\n\nexport default function CSVFileImport({url, title}: CSVFileImportProps) {\n  const classes = useStyles();\n  const [file, setFile] = useState<any>();\n  const [uploadUrl, setUploadUrl] = useState<any>();\n\n  const createFile = (file: any) => {\n    let reader = new FileReader()\n    reader.onload = (e: any) => {\n      console.log(e.target.result);\n      setFile(e.target.result);\n    }\n    reader.readAsDataURL(file)\n  };\n\n  const onFileChange = (e: any) => {\n    console.log(e);\n    let files = e.target.files || e.dataTransfer.files\n    if (!files.length) return\n    createFile(files[0])\n  };\n\n  const removeFile = () => {\n    setFile('');\n  };\n\n  const uploadFile = async (e: any) => {\n      // Get the presigned URL\n      const response = await axios({\n        method: 'GET',\n        url\n      })\n      console.log('Response: ', response.data)\n      console.log('Uploading: ', file)\n      let binary = atob(file.split(',')[1])\n      let array = []\n      for (var i = 0; i < binary.length; i++) {\n        array.push(binary.charCodeAt(i))\n      }\n      let blobData = new Blob([new Uint8Array(array)], {type: 'text/plain'})\n      console.log('Uploading to: ', response.data.uploadURL)\n      const result = await fetch(response.data.uploadURL, {\n        method: 'PUT',\n        body: blobData\n      })\n      console.log('Result: ', result)\n      // Final URL for the user doesn't need the query string params\n      setUploadUrl(response.data.uploadURL.split('?')[0]);\n      setFile('');\n    }\n  ;\n\n  return (\n    <div className={classes.content}>\n      <Typography variant=\"h6\" gutterBottom>\n        {title}\n      </Typography>\n      {!file ? (\n          <input type=\"file\" onChange={onFileChange}/>\n      ) : (\n        <div>\n          {!uploadUrl && <button onClick={removeFile}>Remove file</button>}\n          {!uploadUrl && <button onClick={uploadFile}>Upload file</button>}\n        </div>\n      )}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}