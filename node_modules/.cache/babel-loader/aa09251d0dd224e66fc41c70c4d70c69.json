{"ast":null,"code":"import{createSlice}from'@reduxjs/toolkit';var initialState={value:0};export var counterSlice=createSlice({name:'counter',initialState:initialState,reducers:{increment:function increment(state){// Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n// doesn't actually mutate the state because it uses the Immer library,\n// which detects changes to a \"draft state\" and produces a brand new\n// immutable state based off those changes\nstate.value+=1;},decrement:function decrement(state){state.value-=1;},// Use the PayloadAction type to declare the contents of `action.payload`\nincrementByAmount:function incrementByAmount(state,action){state.value+=action.payload;}}});var _counterSlice$actions=counterSlice.actions,increment=_counterSlice$actions.increment,decrement=_counterSlice$actions.decrement,incrementByAmount=_counterSlice$actions.incrementByAmount;// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched\nexport{increment,decrement,incrementByAmount};export var incrementAsync=function incrementAsync(amount){return function(dispatch){setTimeout(function(){dispatch(incrementByAmount(amount));},1000);};};// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport var selectCount=function selectCount(state){return state.counter.value;};export default counterSlice.reducer;","map":{"version":3,"sources":["/home/iryna/Desktop/nodejs-aws-fe/src/store/counterSlice.ts"],"names":["createSlice","initialState","value","counterSlice","name","reducers","increment","state","decrement","incrementByAmount","action","payload","actions","incrementAsync","amount","dispatch","setTimeout","selectCount","counter","reducer"],"mappings":"AAAA,OAASA,WAAT,KAA2C,kBAA3C,CAOA,GAAMC,CAAAA,YAA0B,CAAG,CACjCC,KAAK,CAAE,CAD0B,CAAnC,CAIA,MAAO,IAAMC,CAAAA,YAAY,CAAGH,WAAW,CAAC,CACtCI,IAAI,CAAE,SADgC,CAEtCH,YAAY,CAAZA,YAFsC,CAGtCI,QAAQ,CAAE,CACRC,SAAS,CAAE,mBAAAC,KAAK,CAAI,CAClB;AACA;AACA;AACA;AACAA,KAAK,CAACL,KAAN,EAAe,CAAf,CACD,CAPO,CAQRM,SAAS,CAAE,mBAAAD,KAAK,CAAI,CAClBA,KAAK,CAACL,KAAN,EAAe,CAAf,CACD,CAVO,CAWR;AACAO,iBAAiB,CAAE,2BAACF,KAAD,CAAQG,MAAR,CAA0C,CAC3DH,KAAK,CAACL,KAAN,EAAeQ,MAAM,CAACC,OAAtB,CACD,CAdO,CAH4B,CAAD,CAAhC,C,0BAqBoDR,YAAY,CAACS,O,CAAzDN,S,uBAAAA,S,CAAWE,S,uBAAAA,S,CAAWC,iB,uBAAAA,iB,CAErC;AACA;AACA;AACA;8CACA,MAAO,IAAMI,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACC,MAAD,QAA8B,UAAAC,QAAQ,CAAI,CACtEC,UAAU,CAAC,UAAM,CACfD,QAAQ,CAACN,iBAAiB,CAACK,MAAD,CAAlB,CAAR,CACD,CAFS,CAEP,IAFO,CAAV,CAGD,CAJ6B,EAAvB,CAMP;AACA;AACA;AACA,MAAO,IAAMG,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACV,KAAD,QAAsBA,CAAAA,KAAK,CAACW,OAAN,CAAchB,KAApC,EAApB,CAEP,cAAeC,CAAAA,YAAY,CAACgB,OAA5B","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { AppThunk, RootState } from 'store/store';\n\ninterface CounterState {\n  value: number;\n}\n\nconst initialState: CounterState = {\n  value: 0,\n};\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  reducers: {\n    increment: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: state => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n      state.value += action.payload;\n    },\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched\nexport const incrementAsync = (amount: number): AppThunk => dispatch => {\n  setTimeout(() => {\n    dispatch(incrementByAmount(amount));\n  }, 1000);\n};\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state: RootState) => state.counter.value;\n\nexport default counterSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}