{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  items: []\n};\nexport const cartSlice = createSlice({\n  name: 'cart',\n  initialState,\n  reducers: {\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    addToCart: (state, action) => {\n      const {\n        items\n      } = state;\n      const {\n        payload: product\n      } = action;\n      const existingItem = items.find(i => i.product.id === product.id);\n\n      if (existingItem) {\n        existingItem.count++;\n        return;\n      }\n\n      items.push({\n        product,\n        count: 1\n      });\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    removeFromCart: (state, action) => {\n      let {\n        items\n      } = state;\n      const {\n        payload: product\n      } = action;\n      const existingItem = items.find(i => i.product.id === product.id);\n      if (!existingItem) return;\n\n      if (existingItem.count > 1) {\n        existingItem.count--;\n        return;\n      }\n\n      state.items = items.filter(i => i.product.id !== product.id);\n    },\n    clearCart: state => {\n      state.items = [];\n    }\n  }\n});\nexport const {\n  addToCart,\n  removeFromCart,\n  clearCart\n} = cartSlice.actions; // The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.cart.value)`\n\nexport const selectCartItems = state => state.cart.items;\nexport default cartSlice.reducer;","map":{"version":3,"sources":["/home/iryna/Desktop/NodeJS-in-AWS-Training/src/store/cartSlice.ts"],"names":["createSlice","initialState","items","cartSlice","name","reducers","addToCart","state","action","payload","product","existingItem","find","i","id","count","push","removeFromCart","filter","clearCart","actions","selectCartItems","cart","reducer"],"mappings":"AAAA,SAAQA,WAAR,QAAyC,kBAAzC;AASA,MAAMC,YAAuB,GAAG;AAC9BC,EAAAA,KAAK,EAAE;AADuB,CAAhC;AAIA,OAAO,MAAMC,SAAS,GAAGH,WAAW,CAAC;AACnCI,EAAAA,IAAI,EAAE,MAD6B;AAEnCH,EAAAA,YAFmC;AAGnCI,EAAAA,QAAQ,EAAE;AACR;AACAC,IAAAA,SAAS,EAAE,CAACC,KAAD,EAAQC,MAAR,KAA2C;AACpD,YAAM;AAACN,QAAAA;AAAD,UAAUK,KAAhB;AACA,YAAM;AAACE,QAAAA,OAAO,EAAEC;AAAV,UAAqBF,MAA3B;AACA,YAAMG,YAAY,GAAGT,KAAK,CAACU,IAAN,CAAWC,CAAC,IAAIA,CAAC,CAACH,OAAF,CAAUI,EAAV,KAAiBJ,OAAO,CAACI,EAAzC,CAArB;;AACA,UAAIH,YAAJ,EAAkB;AAChBA,QAAAA,YAAY,CAACI,KAAb;AACA;AACD;;AACDb,MAAAA,KAAK,CAACc,IAAN,CAAW;AAACN,QAAAA,OAAD;AAAUK,QAAAA,KAAK,EAAE;AAAjB,OAAX;AACD,KAXO;AAYR;AACAE,IAAAA,cAAc,EAAE,CAACV,KAAD,EAAQC,MAAR,KAA2C;AACzD,UAAI;AAACN,QAAAA;AAAD,UAAUK,KAAd;AACA,YAAM;AAACE,QAAAA,OAAO,EAAEC;AAAV,UAAqBF,MAA3B;AACA,YAAMG,YAAY,GAAGT,KAAK,CAACU,IAAN,CAAWC,CAAC,IAAIA,CAAC,CAACH,OAAF,CAAUI,EAAV,KAAiBJ,OAAO,CAACI,EAAzC,CAArB;AACA,UAAI,CAACH,YAAL,EAAmB;;AACnB,UAAIA,YAAY,CAACI,KAAb,GAAqB,CAAzB,EAA4B;AAC1BJ,QAAAA,YAAY,CAACI,KAAb;AACA;AACD;;AACDR,MAAAA,KAAK,CAACL,KAAN,GAAcA,KAAK,CAACgB,MAAN,CAAaL,CAAC,IAAIA,CAAC,CAACH,OAAF,CAAUI,EAAV,KAAiBJ,OAAO,CAACI,EAA3C,CAAd;AACD,KAvBO;AAwBRK,IAAAA,SAAS,EAAGZ,KAAD,IAAW;AACpBA,MAAAA,KAAK,CAACL,KAAN,GAAc,EAAd;AACD;AA1BO;AAHyB,CAAD,CAA7B;AAiCP,OAAO,MAAM;AAACI,EAAAA,SAAD;AAAYW,EAAAA,cAAZ;AAA4BE,EAAAA;AAA5B,IAAyChB,SAAS,CAACiB,OAAzD,C,CAGP;AACA;AACA;;AACA,OAAO,MAAMC,eAAe,GAAId,KAAD,IAAsBA,KAAK,CAACe,IAAN,CAAWpB,KAAzD;AAEP,eAAeC,SAAS,CAACoB,OAAzB","sourcesContent":["import {createSlice, PayloadAction} from '@reduxjs/toolkit';\nimport {RootState} from 'store/store';\nimport {Product} from \"models/Product\";\nimport {CartItem} from \"models/CartItem\";\n\ninterface CartState {\n  items: CartItem[]\n}\n\nconst initialState: CartState = {\n  items: [],\n};\n\nexport const cartSlice = createSlice({\n  name: 'cart',\n  initialState,\n  reducers: {\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    addToCart: (state, action: PayloadAction<Product>) => {\n      const {items} = state;\n      const {payload: product} = action;\n      const existingItem = items.find(i => i.product.id === product.id);\n      if (existingItem) {\n        existingItem.count++;\n        return;\n      }\n      items.push({product, count: 1});\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    removeFromCart: (state, action: PayloadAction<Product>) => {\n      let {items} = state;\n      const {payload: product} = action;\n      const existingItem = items.find(i => i.product.id === product.id);\n      if (!existingItem) return;\n      if (existingItem.count > 1) {\n        existingItem.count--;\n        return;\n      }\n      state.items = items.filter(i => i.product.id !== product.id);\n    },\n    clearCart: (state) => {\n      state.items = [];\n    }\n  },\n});\n\nexport const {addToCart, removeFromCart, clearCart} = cartSlice.actions;\n\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.cart.value)`\nexport const selectCartItems = (state: RootState) => state.cart.items;\n\nexport default cartSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}