{"ast":null,"code":"import{createSlice}from'@reduxjs/toolkit';var initialState={items:[]};export var cartSlice=createSlice({name:'cart',initialState:initialState,reducers:{// Use the PayloadAction type to declare the contents of `action.payload`\naddToCart:function addToCart(state,action){var items=state.items;var product=action.payload;var existingItem=items.find(function(i){return i.product.id===product.id;});if(existingItem){existingItem.count++;return;}items.push({product:product,count:1});},// Use the PayloadAction type to declare the contents of `action.payload`\nremoveFromCart:function removeFromCart(state,action){var items=state.items;var product=action.payload;var existingItem=items.find(function(i){return i.product.id===product.id;});if(!existingItem)return;if(existingItem.count>1){existingItem.count--;return;}state.items=items.filter(function(i){return i.product.id!==product.id;});},clearCart:function clearCart(state){state.items=[];}}});var _cartSlice$actions=cartSlice.actions,addToCart=_cartSlice$actions.addToCart,removeFromCart=_cartSlice$actions.removeFromCart,clearCart=_cartSlice$actions.clearCart;// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.cart.value)`\nexport{addToCart,removeFromCart,clearCart};export var selectCartItems=function selectCartItems(state){return state.cart.items;};export default cartSlice.reducer;","map":{"version":3,"sources":["/home/iryna/Desktop/nodejs-aws-fe/src/store/cartSlice.ts"],"names":["createSlice","initialState","items","cartSlice","name","reducers","addToCart","state","action","product","payload","existingItem","find","i","id","count","push","removeFromCart","filter","clearCart","actions","selectCartItems","cart","reducer"],"mappings":"AAAA,OAAQA,WAAR,KAAyC,kBAAzC,CASA,GAAMC,CAAAA,YAAuB,CAAG,CAC9BC,KAAK,CAAE,EADuB,CAAhC,CAIA,MAAO,IAAMC,CAAAA,SAAS,CAAGH,WAAW,CAAC,CACnCI,IAAI,CAAE,MAD6B,CAEnCH,YAAY,CAAZA,YAFmC,CAGnCI,QAAQ,CAAE,CACR;AACAC,SAAS,CAAE,mBAACC,KAAD,CAAQC,MAAR,CAA2C,IAC7CN,CAAAA,KAD6C,CACpCK,KADoC,CAC7CL,KAD6C,IAEpCO,CAAAA,OAFoC,CAEzBD,MAFyB,CAE7CE,OAF6C,CAGpD,GAAMC,CAAAA,YAAY,CAAGT,KAAK,CAACU,IAAN,CAAW,SAAAC,CAAC,QAAIA,CAAAA,CAAC,CAACJ,OAAF,CAAUK,EAAV,GAAiBL,OAAO,CAACK,EAA7B,EAAZ,CAArB,CACA,GAAIH,YAAJ,CAAkB,CAChBA,YAAY,CAACI,KAAb,GACA,OACD,CACDb,KAAK,CAACc,IAAN,CAAW,CAACP,OAAO,CAAPA,OAAD,CAAUM,KAAK,CAAE,CAAjB,CAAX,EACD,CAXO,CAYR;AACAE,cAAc,CAAE,wBAACV,KAAD,CAAQC,MAAR,CAA2C,IACpDN,CAAAA,KADoD,CAC3CK,KAD2C,CACpDL,KADoD,IAEzCO,CAAAA,OAFyC,CAE9BD,MAF8B,CAElDE,OAFkD,CAGzD,GAAMC,CAAAA,YAAY,CAAGT,KAAK,CAACU,IAAN,CAAW,SAAAC,CAAC,QAAIA,CAAAA,CAAC,CAACJ,OAAF,CAAUK,EAAV,GAAiBL,OAAO,CAACK,EAA7B,EAAZ,CAArB,CACA,GAAI,CAACH,YAAL,CAAmB,OACnB,GAAIA,YAAY,CAACI,KAAb,CAAqB,CAAzB,CAA4B,CAC1BJ,YAAY,CAACI,KAAb,GACA,OACD,CACDR,KAAK,CAACL,KAAN,CAAcA,KAAK,CAACgB,MAAN,CAAa,SAAAL,CAAC,QAAIA,CAAAA,CAAC,CAACJ,OAAF,CAAUK,EAAV,GAAiBL,OAAO,CAACK,EAA7B,EAAd,CAAd,CACD,CAvBO,CAwBRK,SAAS,CAAE,mBAACZ,KAAD,CAAW,CACpBA,KAAK,CAACL,KAAN,CAAc,EAAd,CACD,CA1BO,CAHyB,CAAD,CAA7B,C,uBAiC+CC,SAAS,CAACiB,O,CAAlDd,S,oBAAAA,S,CAAWW,c,oBAAAA,c,CAAgBE,S,oBAAAA,S,CAGzC;AACA;AACA;2CACA,MAAO,IAAME,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACd,KAAD,QAAsBA,CAAAA,KAAK,CAACe,IAAN,CAAWpB,KAAjC,EAAxB,CAEP,cAAeC,CAAAA,SAAS,CAACoB,OAAzB","sourcesContent":["import {createSlice, PayloadAction} from '@reduxjs/toolkit';\nimport {RootState} from 'store/store';\nimport {Product} from \"models/Product\";\nimport {CartItem} from \"models/CartItem\";\n\ninterface CartState {\n  items: CartItem[]\n}\n\nconst initialState: CartState = {\n  items: [],\n};\n\nexport const cartSlice = createSlice({\n  name: 'cart',\n  initialState,\n  reducers: {\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    addToCart: (state, action: PayloadAction<Product>) => {\n      const {items} = state;\n      const {payload: product} = action;\n      const existingItem = items.find(i => i.product.id === product.id);\n      if (existingItem) {\n        existingItem.count++;\n        return;\n      }\n      items.push({product, count: 1});\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    removeFromCart: (state, action: PayloadAction<Product>) => {\n      let {items} = state;\n      const {payload: product} = action;\n      const existingItem = items.find(i => i.product.id === product.id);\n      if (!existingItem) return;\n      if (existingItem.count > 1) {\n        existingItem.count--;\n        return;\n      }\n      state.items = items.filter(i => i.product.id !== product.id);\n    },\n    clearCart: (state) => {\n      state.items = [];\n    }\n  },\n});\n\nexport const {addToCart, removeFromCart, clearCart} = cartSlice.actions;\n\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.cart.value)`\nexport const selectCartItems = (state: RootState) => state.cart.items;\n\nexport default cartSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}